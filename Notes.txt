https://github.com/twitter-archive/commons/blob/master/src/java/com/twitter/common/styleguide.md#recommended-reading
https://google.github.io/styleguide/javaguide.html

CamelCase for types, camelCase for variables, UPPER_SNAKE for constants

Addition and subtraction, using + and -
Multiplication and division, using * and /
The modulo operator for finding remainders, %
Compound assignment operators +=, -=, *=, /=, and %=.
The order of operations: parentheses -> exponents -> multiplication, division, modulo -> addition, subtraction
Greater than, >, and less than, <
Equal to, ==, and not equal to, !=
Greater than or equal to, >=, and less than or equal to, <=
equals() for comparing Strings and other objects
Using + to concatenate Strings
The final keyword which makes variables unchangeable

2D Arrays: 
int[][] intArray1;
intArray1 = new int[row][column];
so:
int[][] intArray2;
intArray2 = new int[3][5];
produces
[
    [0,0,0,0,0]
    [0,0,0,0,0]
    [0,0,0,0,0]
]

See:
public class Circle {
    private int x, y, radius;
    public void setOrigin(int x, int y) {
        ...
    }
}
Circle is a class
setOrigin is a method with PARAMETERS x, y
private int x, y, radius are FIELDS
There is no constructor (?)
Within the {} brackets of setOrigin (the ...) using x / y will refer to the PARAMETER, NOT the FIELDS
Within the {} brackets of setOrigin (the ...) using this.x or this.y will refer to the FIELDS
